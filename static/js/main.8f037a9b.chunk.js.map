{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","reverse","setReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","byAlphabet","localeCompare","byLength","length","getReadyGoods","className","type","cn","onClick","reset","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,iCAAAA,E,2BAAAA,M,KAwCE,IAAME,EAAiB,WAC5B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAtCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAASc,WACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKb,EAASgB,SACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKRX,EACHI,EAAcJ,UACdI,EAciBQ,CAAcjB,EAAiBG,EAAWE,GAE/D,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,SAAU,UACtB,CAAE,WAAYjB,IAAcJ,EAASc,aACvCQ,QAAS,kBAAMjB,EAAaL,EAASc,aAJvC,iCASA,wBACEM,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,WAAYjB,IAAcJ,EAASgB,WACvCM,QAAS,kBAAMjB,EAAaL,EAASgB,WAJvC,4BASA,wBACEI,KAAK,SACLD,UAAWE,IAAG,SAAU,aACtB,CAAE,YAAaf,IACjBgB,QAAS,WACPf,GAAYD,IALhB,sBAWEF,GAAaE,IACb,wBACEc,KAAK,SACLD,UAAU,4BACVG,QAAS,YAjDrB,SACEjB,EACAE,GAEAF,EAAa,IACbE,GAAW,GA6CCgB,CAAMlB,EAAcE,IAJxB,sBAaJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YC5GlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8f037a9b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  byAlphabet = 'Sort alphabetically',\n  byLength = 'Sort by length',\n}\n\nfunction getReadyGoods(\n  goods: string[],\n  sortField: string,\n  reverse: boolean,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.byAlphabet:\n          return good1.localeCompare(good2);\n\n        case SortType.byLength:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return reverse\n    ? preparedGoods.reverse()\n    : preparedGoods;\n}\n\nfunction reset(\n  setSortField: React.Dispatch<React.SetStateAction<string>>,\n  setReverse: React.Dispatch<React.SetStateAction<boolean>>,\n) {\n  setSortField('');\n  setReverse(false);\n}\n\nexport const App : React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReverse] = useState(false);\n  const visibleGoods = getReadyGoods(goodsFromServer, sortField, reverse);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button', 'is-info',\n            { 'is-light': sortField !== SortType.byAlphabet })}\n          onClick={() => setSortField(SortType.byAlphabet)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success',\n            { 'is-light': sortField !== SortType.byLength })}\n          onClick={() => setSortField(SortType.byLength)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning',\n            { 'is-light': !reverse })}\n          onClick={() => {\n            setReverse(!reverse);\n          }}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverse) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              reset(setSortField, setReverse);\n            }}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}